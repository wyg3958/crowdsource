<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>de.axelspringer.ideas</groupId>
    <artifactId>crowdsource</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- deriving from spring-boot-parent saves us from some overhead -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.1.8.RELEASE</version>
    </parent>

    <properties>
        <!-- version specified here is used as an embedded server by spring-boot -->
        <tomcat.version>8.0.14</tomcat.version>
        <!-- tomcat/docker will expose the application under this port for integration tests -->
        <it.application.port>9999</it.application.port>
    </properties>

    <build>
        <resources>
            <resource>
                <directory>src/main/docker</directory>
                <targetPath>${project.build.directory}/docker</targetPath>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <!--enable filtering for test resources (to expose build variables like phantomjs binary-path to tests) -->
            <testResource>
                <directory>${project.basedir}/src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <delimiters>
                        <!-- also filter @-properties (instead of only ${}). here because of a pattern-clash with spring -->
                        <delimiter>@</delimiter>
                    </delimiters>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <!-- creates fat jar with dependencies and embedded servlet container -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.17</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>integration-test</phase>
                        <configuration>
                            <includes>
                                <include>**/**IT.java</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- if activated a tomcat will be launched for integration tests -->
        <profile>
            <id>jar</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.tomcat.maven</groupId>
                        <artifactId>tomcat7-maven-plugin</artifactId>
                        <version>2.2</version>
                        <configuration>
                            <ignorePackaging>true</ignorePackaging>
                            <port>${it.application.port}</port>
                            <path>/</path>
                        </configuration>
                        <executions>
                            <execution>
                                <id>start tomcat for it-tests</id>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <fork>true</fork>
                                </configuration>
                                <phase>pre-integration-test</phase>
                            </execution>
                            <execution>
                                <id>stop tomcat after it-tests</id>
                                <goals>
                                    <goal>shutdown</goal>
                                </goals>
                                <phase>post-integration-test</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- if activated, docker container will be build, used for integration tests and pushed to dockerhub on mvn:deploy -->
        <profile>
            <id>docker</id>
            <build>
                <plugins>
                    <!-- after an hour of fun with a bunch of docker-plugins i decided to use exec with shell scripts. if you do not like it, feel free to refactor -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.3.2</version>
                        <executions>
                            <execution>
                                <id>make scripts executable</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>chmod</executable>
                                    <arguments>
                                        <argument>-R</argument>
                                        <argument>+x</argument>
                                        <argument>${project.build.directory}/docker/</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                            <id>build docker container</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${project.build.directory}/docker/build.sh</executable>
                                </configuration>
                            </execution>
                            <execution>
                                <id>run docker container</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${project.build.directory}/docker/run.sh</executable>
                                </configuration>
                            </execution>
                            <execution>
                                <id>kill docker container</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${project.build.directory}/docker/kill.sh</executable>
                                </configuration>
                            </execution>
                            <execution>
                                <id>push docker container</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${project.build.directory}/docker/push.sh</executable>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>phantomjs</id>
            <build>
                <plugins>
                    <!-- downloads phantomjs and exposed variable phantomjs.binary -->
                    <plugin>
                        <groupId>com.github.klieber</groupId>
                        <artifactId>phantomjs-maven-plugin</artifactId>
                        <version>0.4</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>install</goal>
                                </goals>
                                <phase>generate-test-resources</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <!-- phantomjs version -->
                            <version>1.9.7</version>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12-beta-2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <!-- provided by spring-boot-starter-parent -->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>2.44.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.detro</groupId>
            <artifactId>phantomjsdriver</artifactId>
            <version>1.2.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>